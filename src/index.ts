import express, { Request, Response } from 'express';
import axios from 'axios';
import { URL } from 'url';

const app = express();
const PORT = 3000;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–≤ –ø–∞–º—è—Ç–∏)
const sessions = new Map<string, { targetUrl: string; token: string }>();

app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π
app.get('/', (req: Request, res: Response) => {
    res.send(`
    <!DOCTYPE html>
    <html lang="ru">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Proxy Service</title>
      <style>
        * {
          margin: 0;
          padding: 0;
          box-sizing: border-box;
        }
        
        body {
          font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          min-height: 100vh;
          display: flex;
          justify-content: center;
          align-items: center;
          padding: 20px;
        }
        
        .container {
          background: white;
          padding: 40px;
          border-radius: 20px;
          box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
          max-width: 500px;
          width: 100%;
        }
        
        h1 {
          color: #333;
          margin-bottom: 30px;
          text-align: center;
          font-size: 28px;
        }
        
        .form-group {
          margin-bottom: 25px;
        }
        
        label {
          display: block;
          margin-bottom: 8px;
          color: #555;
          font-weight: 600;
          font-size: 14px;
        }
        
        input {
          width: 100%;
          padding: 12px 15px;
          border: 2px solid #e0e0e0;
          border-radius: 10px;
          font-size: 14px;
          transition: all 0.3s ease;
        }
        
        input:focus {
          outline: none;
          border-color: #667eea;
          box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        
        button {
          width: 100%;
          padding: 14px;
          background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
          color: white;
          border: none;
          border-radius: 10px;
          font-size: 16px;
          font-weight: 600;
          cursor: pointer;
          transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        
        button:hover {
          transform: translateY(-2px);
          box-shadow: 0 10px 25px rgba(102, 126, 234, 0.4);
        }
        
        button:active {
          transform: translateY(0);
        }
        
        .info {
          margin-top: 25px;
          padding: 15px;
          background: #f0f4ff;
          border-radius: 10px;
          border-left: 4px solid #667eea;
        }
        
        .info p {
          color: #555;
          font-size: 13px;
          margin-bottom: 5px;
        }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>üöÄ Proxy Service</h1>
        
        <form id="proxyForm">
          <div class="form-group">
            <label for="url">–¶–µ–ª–µ–≤–∞—è —Å—Å—ã–ª–∫–∞:</label>
            <input 
              type="url" 
              id="url" 
              name="url" 
              placeholder="https://example.com/dashboard" 
              required
            >
          </div>
          
          <div class="form-group">
            <label for="token">–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:</label>
            <input 
              type="text" 
              id="token" 
              name="token" 
              placeholder="Bearer your-token-here" 
              required
            >
          </div>
          
          <button type="submit">–ü–æ–µ—Ö–∞–ª–∏! üéØ</button>
        </form>
        
        <div class="info">
          <p><strong>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</strong></p>
          <p>–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–ü–æ–µ—Ö–∞–ª–∏!" –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Ü–µ–ª–µ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏.</p>
          <p>–í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç –≤–∞—à —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.</p>
        </div>
      </div>
      
      <script>
        const form = document.getElementById('proxyForm');
        
        form.addEventListener('submit', async (e) => {
          e.preventDefault();
          
          const url = document.getElementById('url').value;
          const token = document.getElementById('token').value;
          
          try {
            const response = await fetch('/create-session', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({ url, token })
            });
            
            const data = await response.json();
            
            if (response.ok) {
              // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
              window.location.href = data.proxyUrl;
            } else {
              alert('–û—à–∏–±–∫–∞: ' + (data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            }
          } catch (error) {
            alert('–û—à–∏–±–∫–∞: ' + error.message);
          }
        });
      </script>
    </body>
    </html>
  `);
});

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç URL –ø—Ä–æ–∫—Å–∏
app.post('/create-session', (req: Request, res: Response) => {
    const { url, token } = req.body;

    if (!url || !token) {
        return res.status(400).json({ error: 'URL –∏ —Ç–æ–∫–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL
        const parsedUrl = new URL(url);

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
        const sessionId = Math.random().toString(36).substring(2, 15);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        sessions.set(sessionId, {
            targetUrl: parsedUrl.origin,
            token: token
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –ø—Ä–æ–∫—Å–∏
        const proxyPath = parsedUrl.pathname + parsedUrl.search + parsedUrl.hash;
        const proxyUrl = `/p/${sessionId}${proxyPath}`;

        res.json({
            success: true,
            proxyUrl: proxyUrl
        });
    } catch (error) {
        res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL' });
    }
});

// –ü—Ä–æ–∫—Å–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use('/p/:sessionId', async (req: Request, res: Response) => {
    const sessionId = req.params.sessionId;
    const session = sessions.get(sessionId);

    if (!session) {
        return res.status(404).send(`
      <html>
        <body style="font-family: Arial; text-align: center; padding: 50px;">
          <h1>‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
          <p>–í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ <a href="/">–≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É</a> –∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é.</p>
        </body>
      </html>
    `);
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –ø–æ—Å–ª–µ /p/:sessionId
    const path = req.originalUrl.replace(`/p/${sessionId}`, '');
    const fullUrl = session.targetUrl + path;

    try {
        // –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        const headers: any = {};

        // –ö–æ–ø–∏—Ä—É–µ–º –≤–∞–∂–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if (req.headers['accept']) headers['accept'] = req.headers['accept'];
        if (req.headers['accept-language']) headers['accept-language'] = req.headers['accept-language'];
        if (req.headers['user-agent']) headers['user-agent'] = req.headers['user-agent'];
        if (req.headers['content-type']) headers['content-type'] = req.headers['content-type'];
        if (req.headers['referer']) {
            // –ó–∞–º–µ–Ω—è–µ–º referer –Ω–∞ —Ü–µ–ª–µ–≤–æ–π –¥–æ–º–µ–Ω
            headers['referer'] = session.targetUrl;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        headers['authorization'] = session.token;

        // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ü–µ–ª–µ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
        const response = await axios({
            method: req.method,
            url: fullUrl,
            headers: headers,
            data: req.method !== 'GET' && req.method !== 'HEAD' ? req.body : undefined,
            responseType: 'arraybuffer',
            validateStatus: () => true,
            maxRedirects: 0
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
        if (response.status >= 300 && response.status < 400 && response.headers['location']) {
            const redirectUrl = response.headers['location'];

            // –ï—Å–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–ª–∏ –Ω–∞ —Ç–æ—Ç –∂–µ –¥–æ–º–µ–Ω
            if (redirectUrl.startsWith('/') || redirectUrl.startsWith(session.targetUrl)) {
                const newPath = redirectUrl.startsWith('/') ? redirectUrl : redirectUrl.replace(session.targetUrl, '');
                res.redirect(response.status, `/p/${sessionId}${newPath}`);
                return;
            }
        }

        // –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        Object.keys(response.headers).forEach(key => {
            if (key.toLowerCase() !== 'content-encoding' && key.toLowerCase() !== 'transfer-encoding') {
                res.setHeader(key, response.headers[key]);
            }
        });

        // –ï—Å–ª–∏ —ç—Ç–æ HTML, –∑–∞–º–µ–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
        const contentType = response.headers['content-type'] || '';
        if (contentType.includes('text/html')) {
            let html = response.data.toString('utf-8');

            // –ó–∞–º–µ–Ω—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ URL –Ω–∞ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            const urlPattern = new RegExp(session.targetUrl.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
            html = html.replace(urlPattern, `http://localhost:${PORT}/p/${sessionId}`);

            // –ó–∞–º–µ–Ω—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL
            html = html.replace(
                /(href|src|action)="(\/[^"]+)"/g,
                `$1="http://localhost:${PORT}/p/${sessionId}$2"`
            );

            // –î–æ–±–∞–≤–ª—è–µ–º base tag –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π
            html = html.replace(
                '<head>',
                `<head><base href="http://localhost:${PORT}/p/${sessionId}/">`
            );

            res.status(response.status).send(html);
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            res.status(response.status).send(response.data);
        }

    } catch (error: any) {
        console.error('Proxy error:', error.message);
        res.status(500).send(`
      <html>
        <body style="font-family: Arial; text-align: center; padding: 50px;">
          <h1>‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏</h1>
          <p>${error.message}</p>
          <p><a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a></p>
        </body>
      </html>
    `);
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
    console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
    console.log('‚ïë     üöÄ PROXY SERVICE –ó–ê–ü–£–©–ï–ù üöÄ      ‚ïë');
    console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n');
    console.log(`üìç –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: \x1b[36mhttp://localhost:${PORT}\x1b[0m\n`);
    console.log('–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n');
});